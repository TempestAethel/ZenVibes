<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Black Hole Liquid Effect</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            margin: 0;
            overflow: hidden;
            font-family: 'Arial', sans-serif;
            background-color: #f5f5f5;
        }
        #app {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }
        .settings {
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 15px;
            z-index: 100;
        }
        select {
            padding: 12px 16px;
            font-size: 16px;
            background: #ffffff;
            border: none;
            border-radius: 5px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            transition: background 0.3s ease;
        }
        select:hover {
            background: #e2e2e2;
        }
        select:focus {
            outline: none;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.3);
        }
        option {
            padding: 10px;
        }
    </style>
</head>
<body>

<div id="app">
    <div class="settings">
        <label for="backgroundSelector" style="color: #333; font-size: 18px;">Choose Background:</label>
        <select id="backgroundSelector">
            <option value="gray">Gray Gradient</option>
            <option value="color">Color Gradient</option>
        </select>
    </div>
    <canvas id="liquidCanvas"></canvas>
</div>

<script>
    const canvas = document.getElementById("liquidCanvas");
    const ctx = canvas.getContext("2d");

    let colors = ["#6a11cb", "#2575fc"]; // Default gradient colors
    let blackHoles = []; // Array to store black hole data
    let time = 0;

    // Resize the canvas to fit the screen
    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }

    // Generate a gradient fill based on the selected colors
    function generateGradient() {
        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
        gradient.addColorStop(0, colors[0]);
        gradient.addColorStop(1, colors[1]);
        return gradient;
    }

    // Draw background gradient
    function drawBackground() {
        const bgGradient = generateGradient();
        ctx.fillStyle = bgGradient;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
    }

    // Draw black holes and make the liquid effect move towards them
    function drawBlackHoles() {
        for (let i = 0; i < blackHoles.length; i++) {
            const bh = blackHoles[i];

            // Draw the black hole center
            ctx.beginPath();
            ctx.arc(bh.x, bh.y, bh.size, 0, Math.PI * 2);
            ctx.fillStyle = "rgba(0, 0, 0, 0.5)";
            ctx.fill();

            // Draw the color swirl around it
            const gradient = ctx.createRadialGradient(bh.x, bh.y, 0, bh.x, bh.y, bh.size * 3);
            gradient.addColorStop(0, "rgba(255, 255, 255, 0.2)");
            gradient.addColorStop(1, "rgba(0, 0, 0, 0)");

            ctx.fillStyle = gradient;
            ctx.globalCompositeOperation = "multiply";
            ctx.beginPath();
            ctx.arc(bh.x, bh.y, bh.size * 3, 0, Math.PI * 2);
            ctx.fill();

            // Update the black hole size and remove if too large
            bh.size += 1;
            if (bh.size > 200) {
                blackHoles.splice(i, 1);
                i--; // Adjust the index after removal
            }
        }
    }

    // Update liquid effect and spawn black holes
    function updateLiquidEffect() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawBackground();
        drawBlackHoles();
        time += 0.05;
        requestAnimationFrame(updateLiquidEffect);
    }

    // Handle mouse movement to spawn black holes
    canvas.addEventListener("mousemove", (e) => {
        const mouseX = e.clientX;
        const mouseY = e.clientY;
        // Add a new black hole at the cursor position
        blackHoles.push({
            x: mouseX,
            y: mouseY,
            size: 10 // Initial size
        });
    });

    // Change gradient background based on user selection
    function changeBackground() {
        const selectedValue = document.getElementById("backgroundSelector").value;
        if (selectedValue === "gray") {
            colors = ["#606060", "#c0c0c0"]; // Gray gradient
        } else {
            colors = ["#6a11cb", "#2575fc"]; // Color gradient
        }
    }

    // Initialize canvas and start drawing liquid effect
    window.addEventListener("resize", resizeCanvas);
    document.getElementById("backgroundSelector").addEventListener("change", changeBackground);

    resizeCanvas();  // Initial canvas size adjustment
    changeBackground();  // Set initial gradient background
    updateLiquidEffect();  // Start drawing the liquid effect

</script>

</body>
</html>
